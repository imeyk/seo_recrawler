import logging
from dotenv import main
import asyncio
import os
import time
import sqlite3
import json
import re
from aiogram import F, Router
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram import Bot, Dispatcher, types
from aiogram.types import BotCommand, BotCommandScopeDefault
from aiogram.filters import Command, CommandObject, CommandStart, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import Message
from aiogram.utils.keyboard import InlineKeyboardBuilder
from donkey.check_valid_url import check_valid_url
from donkey.validate_json import validate_json
from google.publish import google_publish
from yandex.recrawl import yandex_recrawl
from indexnow.publish_single import indexnow_publish

# TODO: –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –∑–∞–ø–∏—Å—å –ª–æ–≥–æ–≤ –≤ —Ñ–∞–π–ª
logging.basicConfig(level=logging.INFO, format='%(asctime)s / %(levelname)s / %(message)s', datefmt='%d.%m.%y %H:%M:%S') # –ó–∞–ø–∏—Å—å –ª–æ–≥–æ–≤ –≤ —Ñ–∞–π–ª
__version__ = "0.0.3"
main.load_dotenv()
storage = MemoryStorage()
router = Router()
bot = Bot(token=os.getenv("API_TOKEN"))
dp = Dispatcher(storage=storage)
DB = os.getenv("DB")
admin_id = os.getenv("ADMIN_ID")

class CreateProject(StatesGroup):
    url = State()
    indexnow = State()
    indexnow_key = State()
    indexnow_key_path = State()
    indexnow_service = State()
    indexing_api = State()
    indexing_api_key = State()
    webmaster = State()
    yandex_user_token = State()
    add_to_db = State()

class SettingsForm(StatesGroup):
    main = State()
    set_default_yandex_user_token = State()

class AdminState(StatesGroup):
    broadcast = State()

def init_db():
    conn = sqlite3.connect(DB)
    cursor = conn.cursor()
    cursor.execute('''
    CREATE TABLE IF NOT EXISTS projects (
        id INTEGER PRIMARY KEY,
        user_id INTEGER,
        url TEXT,
        indexnow BOOLEAN,
        indexnow_key TEXT,
        indexnow_key_path TEXT,
        indexnow_service INT,
        indexing_api BOOLEAN,
        indexing_api_key TEXT,
        webmaster BOOLEAN,
        yandex_user_token TEXT
    )
    ''')
    cursor.execute('''
    CREATE TABLE IF NOT EXISTS settings (
        user_id INTEGER PRIMARY KEY,
        default_yandex_user_token TEXT
    )
    ''')
    conn.commit()
    conn.close()

# TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —Ä–∞–±–æ—Ç—É –±–æ—Ç–∞ –Ω–∞ –æ–¥–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏
# TODO: –î–æ–±–∞–≤–∏—Ç—å –∫–æ–º–∞–Ω–¥—É /report
# –•—ç–Ω–¥–ª–µ—Ä –Ω–∞ –∫–æ–º–∞–Ω–¥—É /start
@dp.message(Command("start"))
async def cmd_start(callback_query: types.CallbackQuery, state: FSMContext):
    if callback_query.from_user.username: # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ª–æ–≥–∏–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–î–ª—è –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è)
        username = "@" + callback_query.from_user.username + " (" + str(callback_query.from_user.id) + ")"
    else:
        username = callback_query.from_user.id

    try: await callback_query.message.edit_reply_markup(reply_markup=None) # –ü–æ–ø—ã—Ç–∫–∞ —Å–∫—Ä—ã—Ç–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    except: pass

    logging.info(f"{username} / –í–≤–µ–¥–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ start")
    await state.clear()

    logging.info(f"{username} / –ö–æ–º–∞–Ω–¥–∞ start / –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –Ω–∞–ª–∏—á–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤")
    conn = sqlite3.connect(DB)
    cursor = conn.cursor()
    cursor.execute('SELECT id, url FROM projects WHERE user_id = ?', (callback_query.from_user.id,))
    projects = cursor.fetchall()
    logging.info(f"{username} / –ö–æ–º–∞–Ω–¥–∞ start / –ó–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö")
    conn.close()

    builder = InlineKeyboardBuilder()
    if projects:
        builder.row(types.InlineKeyboardButton(text="–°–ø–∏—Å–æ–∫ –ø—Ä–æ–µ–∫—Ç–æ–≤", callback_data="show-projects"))
    else:
        builder.row(types.InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–µ–∫—Ç", callback_data="create-project"))
    builder.row(types.InlineKeyboardButton(text="–ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="settings"))
    builder.row(types.InlineKeyboardButton(text="–ü–æ–º–æ—â—å", url="https://imeyk.gitbook.io/recrawler-faq"))

    await bot.send_message(callback_query.from_user.id, f"üëã –ü—Ä–∏–≤–µ—Ç {callback_query.from_user.first_name}, –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–ø–∏—Å–∫–∞ –ø—Ä–æ–µ–∫—Ç–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /projects –∏–ª–∏ /settings –¥–ª—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Ä–∞–±–æ—Ç—ã —Å—Ü–µ–Ω–∞—Ä–∏—è –±–æ—Ç–∞", reply_markup=builder.as_markup())

# –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞
@dp.message(CommandStart(
    deep_link=True,
    magic=F.args.regexp(re.compile(r'ref_(\d+)')) # /?start=ref_255
))
async def cmd_start_book(
        message: Message,
        command: CommandObject
):
    ref_code = command.args.split("_")[1]
    if ref_code:
        # TODO: –î–æ–±–∞–≤–∏—Ç—å –∑–∞–ø–∏—Å—å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–≥–æ –∫–æ–¥–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        logging.info(f"{'@' + message.from_user.username + ' (' + str(message.from_user.id) + ')' if message.from_user.username else message.from_user.id} / –ü—Ä–∏–≥–ª–∞—à–µ–Ω –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–º—É –∫–æ–¥—É #{ref_code}")
        await message.answer(f"–í—ã –ø—Ä–∏–≥–ª–∞—à–µ–Ω—ã –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–º—É –∫–æ–¥—É #{ref_code}") # –ü–æ–∫–∞ —Ç–æ–ª—å–∫–æ –æ–ø–æ–≤–µ—â–µ–Ω–∏–µ

# –ö–æ–º–∞–Ω–¥–∞ "–û—Ç–º–µ–Ω–∞"
@dp.message(StateFilter(None), Command("cancel"))
@dp.callback_query(F.data == "cancel")
@router.message(StateFilter(None), F.text.lower() == "–æ—Ç–º–µ–Ω–∞")
async def cmd_cancel_no_state(callback_query: types.CallbackQuery, state: FSMContext):
    try: await callback_query.message.edit_reply_markup(reply_markup=None) # –ü–æ–ø—ã—Ç–∫–∞ —Å–∫—Ä—ã—Ç–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    except: pass

    await state.set_data({}) # –°—Ç–µ–π—Ç —Å–±—Ä–∞—Å—ã–≤–∞—Ç—å –Ω–µ –Ω—É–∂–Ω–æ, —É–¥–∞–ª–∏–º —Ç–æ–ª—å–∫–æ –¥–∞–Ω–Ω—ã–µ
    await bot.send_message(callback_query.from_user.id, "–ù–µ—á–µ–≥–æ –æ—Ç–º–µ–Ω—è—Ç—å", reply_markup=None)

@dp.message(Command("cancel"))
@dp.callback_query(F.data == "cancel")
@router.message(F.text.lower() == "–æ—Ç–º–µ–Ω–∞")
async def cmd_cancel(callback_query: types.CallbackQuery, state: FSMContext):
    try: await callback_query.message.edit_reply_markup(reply_markup=None) # –ü–æ–ø—ã—Ç–∫–∞ —Å–∫—Ä—ã—Ç–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    except: pass

    await state.clear()
    await bot.send_message(callback_query.from_user.id, "–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=None)

# –í—ã–≤–æ–¥ —Å–ø–∏—Å–∫–∞ –ø—Ä–æ–µ–∫—Ç–æ–≤
@dp.message(Command("projects"))
@dp.callback_query(F.data == "show-projects")
async def handle_projects(callback_query: types.CallbackQuery, state: FSMContext):
    if callback_query.from_user.username: # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ª–æ–≥–∏–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–î–ª—è –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è)
        username = "@" + callback_query.from_user.username + " (" + str(callback_query.from_user.id) + ")"
    else:
        username = callback_query.from_user.id

    await state.set_state(SettingsForm.main) # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    logging.info(f"{username} / –°–ø–∏—Å–æ–∫ –ø—Ä–æ–µ–∫—Ç–æ–≤ / –í—ã–∑–≤–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏")

    logging.info(f"{username} / –°–ø–∏—Å–æ–∫ –ø—Ä–æ–µ–∫—Ç–æ–≤ / –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö") # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø—Ä–æ–µ–∫—Ç–æ–≤
    conn = sqlite3.connect(DB)
    cursor = conn.cursor()
    cursor.execute('SELECT id, url FROM projects WHERE user_id = ?', (callback_query.from_user.id,))
    projects = cursor.fetchall()
    conn.close()
    logging.info(f"{username} / –°–ø–∏—Å–æ–∫ –ø—Ä–æ–µ–∫—Ç–æ–≤ / –ó–∞–∫—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö") # –ó–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö

    builder = InlineKeyboardBuilder()
    if projects:
        logging.info(f"{username} / –°–ø–∏—Å–æ–∫ –ø—Ä–æ–µ–∫—Ç–æ–≤ / –í—ã–≤–æ–¥ —Å–ø–∏—Å–∫–∞ –ø—Ä–æ–µ–∫—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        for project in projects:
            project_name = re.sub(r'^(https?://)?(www\.)?', '', project[1]).rstrip('/')
            builder.row(types.InlineKeyboardButton(text=project_name, callback_data=f"project_{project[0]}"))        
        builder.row(types.InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–µ–∫—Ç", callback_data="create-project"))

        await bot.send_message(callback_query.from_user.id, "–°–ø–∏—Å–æ–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤", reply_markup=builder.as_markup())
    else:
        logging.info(f"{username} / –°–ø–∏—Å–æ–∫ –ø—Ä–æ–µ–∫—Ç–æ–≤ / –°–ø–∏—Å–æ–∫ –ø—Ä–æ–µ–∫—Ç–æ–≤ –ø—É—Å—Ç")
        builder.add(types.InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–µ–∫—Ç", callback_data="create-project"))
        await bot.send_message(callback_query.from_user.id, "–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç—ã", reply_markup=builder.as_markup())

# –í—ã–≤–æ–¥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–æ–µ–∫—Ç–µ
@dp.callback_query(F.data.startswith('project_'))
async def process_project_selection(callback_query: types.CallbackQuery):
    logging.info(f"[{callback_query.from_user.id}] –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–µ–∫—Ç–µ")
    await callback_query.message.edit_reply_markup(reply_markup=None)
    project_id = callback_query.data.replace('project_', '')
    conn = sqlite3.connect(DB)
    cursor = conn.cursor()
    cursor.execute('SELECT id, url, indexing_api, webmaster, indexnow FROM projects WHERE user_id = ? AND id = ?', (callback_query.from_user.id, project_id))
    project = cursor.fetchone()
    project_id = int(project[0])
    if project:
        logging.info(f"[{callback_query.from_user.id}] –í—ã–≤–æ–¥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–æ–µ–∫—Ç–µ {project[1]}.")
        # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –≤—ã–±–æ—Ä –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ –≤ –ø—Ä–æ–µ–∫—Ç–µ
        # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞
        builder = InlineKeyboardBuilder()
        builder.add(types.InlineKeyboardButton(text="–£–¥–∞–ª–∏—Ç—å", callback_data=f"delete_project_{project_id}"))
        
        message_text = (re.sub(r'^(https?://)?(www\.)?', '', project[1]).rstrip('/') +
            f"\nID: {project[0]}\n" +
            ("\nGoogle Indexing API: üü¢ –í–∫–ª—é—á–µ–Ω" if project[2] else '\nGoogle Indexing API: üî¥ –û—Ç–∫–ª—é—á–µ–Ω') +
            ("\nYandex Webmaster: üü¢ –í–∫–ª—é—á–µ–Ω" if project[3] else '\nYandex Webmaster: üî¥ –û—Ç–∫–ª—é—á–µ–Ω') +
            ("\nIndexNow: üü¢ –í–∫–ª—é—á–µ–Ω" if project[4] else '\nIndexNow: üî¥ –û—Ç–∫–ª—é—á–µ–Ω')
        )
        await bot.send_message(callback_query.from_user.id, message_text, reply_markup=builder.as_markup(), disable_web_page_preview=True)
    conn.close()

# –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞
@dp.callback_query(F.data.startswith('delete_project_'))
async def callback_delete_project_button(callback_query: types.CallbackQuery):
    await callback_query.message.edit_reply_markup(reply_markup=None)
    project_id = callback_query.data.split('_', 2)[-1]
    conn = sqlite3.connect(DB)
    cursor = conn.cursor()
    cursor.execute('SELECT url FROM projects WHERE id = ? AND user_id = ?', (project_id, callback_query.from_user.id))
    project = cursor.fetchone()
    conn.close()
    logging.info(f"[{callback_query.from_user.id}] –ò–Ω–∏—Ü–∏—Ä–æ–≤–∞–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞ {project[0]}.")
    builder = InlineKeyboardBuilder()
    builder.add(types.InlineKeyboardButton(text="–î–∞", callback_data=f"process_delete_project_{project_id}"))
    builder.add(types.InlineKeyboardButton(text="–ù–µ—Ç", callback_data=f"cancel"))
    await bot.send_message(callback_query.from_user.id, f"–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –ø—Ä–æ–µ–∫—Ç {project[0]}?", reply_markup=builder.as_markup(), disable_web_page_preview=True)

# –ü—Ä–æ—Ü–µ—Å—Å —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞
@dp.callback_query(F.data.startswith('process_delete_project_'))
async def process_callback_delete_project_button(callback_query: types.CallbackQuery, state: FSMContext):
    await callback_query.message.edit_reply_markup(reply_markup=None)
    project_id = callback_query.data.split('_', 3)[-1]
    logging.info(f"[{callback_query.from_user.id}] –£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ ‚Äì ID: {project_id}.")
    print(project_id)
    print(type(project_id))
    conn = sqlite3.connect(DB)
    cursor = conn.cursor()
    cursor.execute("DELETE FROM projects WHERE id = ? AND user_id = ?", (project_id, callback_query.from_user.id))
    conn.commit()
    try:
        logging.info(f"[{callback_query.from_user.id}] –°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ")
        await bot.edit_message_text(chat_id=callback_query.message.chat.id, message_id=callback_query.message.message_id, text=f"–ü—Ä–æ–µ–∫—Ç ID: {project_id} ‚Äì –£—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω")
    except Exception as e:
        logging.error(f"[{callback_query.from_user.id}] –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e})")
        await bot.send_message(callback_query.from_user.id, f"–ü—Ä–æ–µ–∫—Ç ID: {project_id} ‚Äì –£—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω")
    # TODO: –î–æ–±–∞–≤–∏—Ç—å –≤–æ–∑–≤—Ä–∞—Ç –≤ —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–µ–∫—Ç–æ–≤
    conn.close()
    await state.clear()

# –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞
# TODO: –ü—Ä–æ—Ä–∞–±–æ—Ç–∞—Ç—å –∏ –¥–æ–±–∞–≤–∏—Ç—å –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å–∫—Ä–∏–ø—Ç–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
@dp.callback_query(F.data == "create-project")
async def process_callback_create_project_button(message: types.Message, state: FSMContext):
    logging.info(f"[{message.from_user.id}] –í–≤–æ–¥ URL –ø—Ä–æ–µ–∫—Ç–∞")
    await bot.send_message(message.from_user.id, "–í–≤–µ–¥–∏—Ç–µ URL –ø—Ä–æ–µ–∫—Ç–∞", reply_markup=None)
    await state.set_state(CreateProject.url) # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è

@dp.message(CreateProject.url)
async def process_project_name(message: types.Message, state: FSMContext):
    cleaned_url = check_valid_url(message.from_user.id, message.text, check_domain=True)
    logging.info(f"[{message.from_user.id}] –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ URL {cleaned_url}")
    
    if not cleaned_url:
        logging.error(f"[{message.from_user.id}] –í–≤–µ–¥–µ–Ω–Ω—ã–π –¥–æ–º–µ–Ω –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –∏–ª–∏ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
        await message.reply("–í–≤–µ–¥–µ–Ω–Ω—ã–π –¥–æ–º–µ–Ω –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –∏–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π URL.")
        return
    else:
        logging.info(f"[{message.from_user.id}] –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –¥–æ–º–µ–Ω–∞ –ë–î")
        conn = sqlite3.connect(DB)
        cursor = conn.cursor()
        cursor.execute('SELECT id, url FROM projects WHERE user_id = ? AND url = ?', (message.from_user.id, cleaned_url))
        project = cursor.fetchone()
        # logging.error(f"[{message.from_user.id}] {project}")
        conn.close()

        if project is None:
            # –ï—Å–ª–∏ –ø—Ä–æ–µ–∫—Ç –Ω–µ –±—ã–ª —Ä–∞–Ω–µ–µ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            logging.info(f"[{message.from_user.id}] –ü—Ä–æ–µ–∫—Ç {cleaned_url} —Ä–∞–Ω–µ–µ –Ω–µ –±—ã–ª –¥–æ–±–∞–≤–ª–µ–Ω –≤ –ë–î. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ")
            message_text = ('–î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–µ–∫—Ç ‚Äì ' + re.sub(r'^(https?://)?(www\.)?', '', cleaned_url).rstrip('/'))
            await bot.send_message(message.from_user.id, message_text, disable_web_page_preview=True)
            # await message.answer(message, disable_web_page_preview=True)

            logging.info(f"[{message.from_user.id}] –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–µ–∫—Ç ‚Äì {cleaned_url}.")
            await state.update_data(url=cleaned_url) # data = await state.get_data()

            await state.set_state(CreateProject.indexing_api) # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è
            builder = InlineKeyboardBuilder()
            builder.add(types.InlineKeyboardButton(text="–î–∞", callback_data="useIndexingAPI"))
            builder.add(types.InlineKeyboardButton(text="–ù–µ—Ç", callback_data="notUseIndexingAPI"))
            await message.answer(
                "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–µ—Ä–≤–∏—Å Google Indexing API –¥–ª—è –ø–µ—Ä–µ–æ–±—Ö–æ–¥–∞?",
                reply_markup=builder.as_markup()
            )
        else:
            # –ï—Å–ª–∏ –ø—Ä–æ–µ–∫—Ç —Ä–∞–Ω–µ–µ –±—ã–ª –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            # TODO: –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –≤—ã–≤–æ–¥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–æ–µ–∫—Ç–µ
            await message.reply(f"–ü—Ä–æ–µ–∫—Ç {cleaned_url} - —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç", disable_web_page_preview=True)
            await state.clear()


# Google Indexing API –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–î–∞"
@dp.callback_query(F.data == "useIndexingAPI")
async def process_use_googleindexing_api(callback_query: types.CallbackQuery, state: FSMContext):
    await callback_query.message.edit_reply_markup(reply_markup=None)
    logging.info(f"[{callback_query.from_user.id}] –ù–∞ –ø—Ä–æ–µ–∫—Ç–µ –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è Google Indexing API")
    await state.update_data(indexing_api=True)
    await bot.answer_callback_query(callback_query.id)
    logging.info(f"[{callback_query.from_user.id}] –î–æ–±–∞–≤–ª–µ–Ω–∏–µ json –∫–ª—é—á–∞ –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞")
    await bot.send_message(callback_query.from_user.id, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ JSON –∫–ª—é—á")
    await state.set_state(CreateProject.indexing_api_key) # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è

# –û–±—Ä–∞–±–æ—Ç–∫–∞ JSON –∫–ª—é—á–∞ –¥–ª—è Google Indexing API
# TODO: –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å JSON –∫–ª—é—á–∞ –ø–æ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—é —Å—Ç—Ä–æ–∫
@dp.message(CreateProject.indexing_api_key)
async def process_add_google_indexing_api_key(message: types.Message, state: FSMContext):
    json_key = ''

    if message.content_type == 'document':
        if message.document.mime_type == 'application/json' or message.document.file_name.endswith('.json') or message.document.file_name.endswith('.txt'):
            file = await bot.get_file(message.document.file_id)
            file_path = file.file_path
            contents = await bot.download_file(file_path)
            json_key = contents.decode('utf-8')
        else:
            logging.error(f"[{message.from_user.id}] –û—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–µ–≤–µ—Ä–Ω—ã–π JSON –∫–ª—é—á.")
            builder = InlineKeyboardBuilder()
            builder.add(types.InlineKeyboardButton(text="–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="skipUseIndexingAPI"))
            await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç JSON –∫–ª—é—á–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞", reply_markup=builder.as_markup())
            # TODO: –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–ø—É—Å–∫ —à–∞–≥–∞
            return
    elif message.content_type == 'text':
        json_key = message.text
    else:
        builder = InlineKeyboardBuilder()
        builder.add(types.InlineKeyboardButton(text="–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="skipUseIndexingAPI"))
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç JSON –∫–ª—é—á–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞", reply_markup=builder.as_markup())
        return

    # TODO: –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ JSON –∫–ª—é—á–∞ (validate_json.py)
    if validate_json(json_key):
        await state.update_data(indexing_api_key=json_key)
        logging.info(f"[{message.from_user.id}] –í–≤–µ–¥–µ–Ω JSON –∫–ª—é—á: {json_key}")
        await message.answer("JSON –∫–ª—é—á –¥–ª—è Google Indexing API –ø—Ä–∏–Ω—è—Ç.")

        await state.set_state(CreateProject.webmaster)
        builder = InlineKeyboardBuilder()
        builder.add(types.InlineKeyboardButton(text="–î–∞", callback_data="useWebmaster"))
        builder.add(types.InlineKeyboardButton(text="–ù–µ—Ç", callback_data="notUseWebmaster"))
        await bot.send_message(message.from_user.id, "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–µ—Ä–≤–∏—Å –Ø–Ω–¥–µ–∫—Å –í–µ–±–º–∞—Å—Ç–µ—Ä –¥–ª—è –ø–µ—Ä–µ–æ–±—Ö–æ–¥–∞?", reply_markup=builder.as_markup())
        #??? await process_use_webmaster()
        # await commit_to_db(message.from_user.id, data)
    else:
        builder = InlineKeyboardBuilder()
        builder.add(types.InlineKeyboardButton(text="–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="skipUseIndexingAPI"))
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç JSON –∫–ª—é—á–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞", reply_markup=builder.as_markup())
        # TODO: –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–ø—É—Å–∫ —à–∞–≥–∞
        return

    await state.set_state(CreateProject.webmaster)

# –ü—Ä–æ–ø—É—Å–∫ –≤–≤–æ–¥–∞ JSON –∫–ª—é—á–∞ –¥–ª—è Google Indexing API
@dp.callback_query(F.data == "skipUseIndexingAPI")
async def process_not_skip_googleindexing_api_key(callback_query: types.CallbackQuery, state: FSMContext):
    logging.info(f"[{callback_query.from_user.id}] –ü—Ä–æ–ø—É—Å–∫ –≤–≤–æ–¥–∞ –∫–ª—é—á–∞ Google Indexing API")
    # await callback_query.message.edit_reply_markup(reply_markup=None)
    await state.update_data(indexing_api=False) # await state.get_data()
    
    await state.set_state(CreateProject.webmaster)
    builder = InlineKeyboardBuilder()
    builder.add(types.InlineKeyboardButton(text="–î–∞", callback_data="useWebmaster"))
    builder.add(types.InlineKeyboardButton(text="–ù–µ—Ç", callback_data="notUseWebmaster"))
    await bot.send_message(callback_query.from_user.id, "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–µ—Ä–≤–∏—Å –Ø–Ω–¥–µ–∫—Å –í–µ–±–º–∞—Å—Ç–µ—Ä –¥–ª—è –ø–µ—Ä–µ–æ–±—Ö–æ–¥–∞?", reply_markup=builder.as_markup())

# Google Indexing API –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ù–µ—Ç"
@dp.callback_query(F.data == "notUseIndexingAPI")
async def process_not_use_googleindexing_api(callback_query: types.CallbackQuery, state: FSMContext):
    logging.info(f"[{callback_query.from_user.id}] –û—Ç–∫–∞–∑ –æ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è Google Indexing API")
    await callback_query.message.edit_reply_markup(reply_markup=None)
    await state.update_data(indexing_api=False) # await state.get_data()
    
    await state.set_state(CreateProject.webmaster)
    builder = InlineKeyboardBuilder()
    builder.add(types.InlineKeyboardButton(text="–î–∞", callback_data="useWebmaster"))
    builder.add(types.InlineKeyboardButton(text="–ù–µ—Ç", callback_data="notUseWebmaster"))
    await bot.send_message(callback_query.from_user.id, "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–µ—Ä–≤–∏—Å –Ø–Ω–¥–µ–∫—Å –í–µ–±–º–∞—Å—Ç–µ—Ä –¥–ª—è –ø–µ—Ä–µ–æ–±—Ö–æ–¥–∞?", reply_markup=builder.as_markup())


# TODO: –î–æ–±–∞–≤–∏—Ç—å —Ä–∞–±–æ—Ç—É —Å —Å–µ—Ä–≤–∏—Å–æ–º –Ø–Ω–¥–µ–∫—Å.–í–µ–±–º–∞—Å—Ç–µ—Ä
@dp.message(CreateProject.webmaster)
async def process_use_webmaster(callback_query: types.CallbackQuery, state: FSMContext):
    await callback_query.message.edit_reply_markup(reply_markup=None)
    builder = InlineKeyboardBuilder()
    builder.add(types.InlineKeyboardButton(text="–î–∞", callback_data="useWebmaster"))
    builder.add(types.InlineKeyboardButton(text="–ù–µ—Ç", callback_data="notUseWebmaster"))
    await bot.send_message(callback_query.from_user.id, "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–µ—Ä–≤–∏—Å –Ø–Ω–¥–µ–∫—Å –í–µ–±–º–∞—Å—Ç–µ—Ä –¥–ª—è –ø–µ—Ä–µ–æ–±—Ö–æ–¥–∞?", reply_markup=builder.as_markup())

# –Ø–Ω–¥–µ–∫—Å.–í–µ–±–º–∞—Å—Ç–µ—Ä –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–î–∞"
# TODO: –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ —Ç–æ–∫–µ–Ω–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏
@dp.callback_query(F.data == "useWebmaster")
async def process_use_webmaster(callback_query: types.CallbackQuery, state: FSMContext):
    if callback_query.from_user.username: # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ª–æ–≥–∏–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–î–ª—è –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è)
        username = "@" + callback_query.from_user.username + " (" + str(callback_query.from_user.id) + ")"
    else:
        username = callback_query.from_user.id
    
    logging.info(f"{username} / –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ / Yandex Webmaster / –ò–Ω–∏—Ü–∏–ª–∏–∑–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –∫–Ω–æ–ø–∫–∏ '–î–∞'")
    await callback_query.message.edit_reply_markup(reply_markup=None) # –°–∫—Ä—ã—Ç–∏–µ inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    await state.set_state(CreateProject.yandex_user_token) # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    await state.update_data(webmaster=True) # await state.get_data()
    await bot.answer_callback_query(callback_query.id) # ???
    logging.info(f"{username} / –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ / Yandex Webmaster / –û–∂–¥–∏–∞–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
    
    # TODO: –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É —Ç–æ–∫–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ø–Ω–¥–µ–∫—Å –í–µ–±–º–∞—Å—Ç–µ—Ä
    logging.info(f"{username} / –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ / Yandex Webmaster /–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö") # –ó–∞–ø—Ä–æ—Å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    conn = sqlite3.connect(DB)
    cursor = conn.cursor()
    logging.info(f"{username} / –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ / Yandex Webmaster / –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
    cursor.execute('SELECT default_yandex_user_token FROM settings WHERE user_id = ?', (callback_query.from_user.id,))
    default_user_token = cursor.fetchall()
    logging.info(f"{username} / –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ / Yandex Webmaster / –ó–∞–∫—Ä—ã—Ç–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö")
    conn.close() # –ó–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö

    if default_user_token:
        builder = InlineKeyboardBuilder()
        builder.add(types.InlineKeyboardButton(text="–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ–∫–µ–Ω –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é", callback_data="useWebmasterWithDefaultToken"))
        await bot.send_message(callback_query.from_user.id, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ Yandex user token –∫–ª—é—á", reply_markup=builder.as_markup())
    else:
        await bot.send_message(callback_query.from_user.id, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ Yandex user token –∫–ª—é—á")

# TODO: –î–æ–±–∞–≤–∏—Ç—å —Ä–∞–±–æ—Ç—É —Å —Å–µ—Ä–≤–∏—Å–æ–º –Ø–Ω–¥–µ–∫—Å.–í–µ–±–º–∞—Å—Ç–µ—Ä
@dp.message(CreateProject.yandex_user_token)
async def process_use_webmaster(message: types.Message, state: FSMContext):
    logging.info(f"[{message.from_user.id}] Yandex user token –ø–æ–ª—É—á–µ–Ω - –æ–±—Ä–∞–±–æ—Ç–∫–∞")
    await state.update_data(yandex_user_token = message.text) # await state.get_data()
    
    await state.set_state(CreateProject.indexnow)
    builder = InlineKeyboardBuilder()
    builder.add(types.InlineKeyboardButton(text="–î–∞", callback_data="useIndexNow"))
    # TODO: –ï—Å–ª–∏ –¥–æ —ç—Ç–æ–≥–æ –Ø–Ω–¥–µ–∫—Å –í–µ–±–º–∞—Å—Ç–µ—Ä –∏ Google Indexing API = False, —Ç–æ –∑–∞–º–µ–Ω—è–µ–º –∫–Ω–æ–ø–∫—É –Ω–µ—Ç
    builder.add(types.InlineKeyboardButton(text="–ù–µ—Ç", callback_data="notUseIndexNow"))
    await message.answer(
        "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–ª—è –ø–µ—Ä–µ–æ–±—Ö–æ–¥–∞ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—é IndexNow (Yandex, Bing)?",
        reply_markup=builder.as_markup()
    )

# –Ø–Ω–¥–µ–∫—Å.–í–µ–±–º–∞—Å—Ç–µ—Ä –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ–∫–µ–Ω –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"
@dp.callback_query(F.data == "useWebmasterWithDefaultToken")
async def process_not_use_webmaster(callback_query: types.CallbackQuery, state: FSMContext):
    await callback_query.message.edit_reply_markup(reply_markup=None)
    await bot.answer_callback_query(callback_query.id)
    await state.update_data(webmaster=True, yandex_user_token="default") # await state.get_data()
    
    await state.set_state(CreateProject.indexnow_key)
    builder = InlineKeyboardBuilder()
    builder.add(types.InlineKeyboardButton(text="–î–∞", callback_data="useIndexNow"))
    builder.add(types.InlineKeyboardButton(text="–ù–µ—Ç", callback_data="notUseIndexNow"))
    await bot.send_message(callback_query.from_user.id, "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–ª—è –ø–µ—Ä–µ–æ–±—Ö–æ–¥–∞ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—é IndexNow (Yandex, Bing)?", reply_markup=builder.as_markup())

# –Ø–Ω–¥–µ–∫—Å.–í–µ–±–º–∞—Å—Ç–µ—Ä –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ù–µ—Ç"
@dp.callback_query(F.data == "notUseWebmaster")
async def process_not_use_webmaster(callback_query: types.CallbackQuery, state: FSMContext):
    logging.info(f"[{callback_query.from_user.id}] –û—Ç–∫–∞–∑ –æ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å–µ—Ä–≤–∏—Å–∞ –Ø–Ω–¥–µ–∫—Å –í–µ–±–º–∞—Å—Ç–µ—Ä")
    await callback_query.message.edit_reply_markup(reply_markup=None)
    await bot.answer_callback_query(callback_query.id)
    await state.update_data(webmaster=False) # await state.get_data()
    
    await state.set_state(CreateProject.indexnow_key)
    builder = InlineKeyboardBuilder()
    builder.add(types.InlineKeyboardButton(text="–î–∞", callback_data="useIndexNow"))
    builder.add(types.InlineKeyboardButton(text="–ù–µ—Ç", callback_data="notUseIndexNow"))
    await bot.send_message(callback_query.from_user.id, "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–ª—è –ø–µ—Ä–µ–æ–±—Ö–æ–¥–∞ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—é IndexNow (Yandex, Bing)?", reply_markup=builder.as_markup())

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ - IndexNow
# TODO: –î–æ–±–∞–≤–∏—Ç—å —Ä–∞–±–æ—Ç—É —Å —Å–µ—Ä–≤–∏—Å–æ–º IndexNow
@dp.message(CreateProject.indexnow)
async def process_use_webmaster(callback_query: types.CallbackQuery, state: FSMContext):
    await callback_query.message.edit_reply_markup(reply_markup=None)

    await state.set_state(CreateProject.indexnow_key)
    builder = InlineKeyboardBuilder()
    builder.add(types.InlineKeyboardButton(text="–î–∞", callback_data="useIndexNow"))
    builder.add(types.InlineKeyboardButton(text="–ù–µ—Ç", callback_data="notUseIndexNow"))
    await bot.send_message(callback_query.from_user.id, "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–ª—è –ø–µ—Ä–µ–æ–±—Ö–æ–¥–∞ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—é IndexNow (Yandex, Bing)", reply_markup=builder.as_markup())

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ - IndexNow - –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–î–∞"
# TODO: –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É –∫–ª—é—á–∞ IndexNow
# TODO: –î–æ–±–∞–≤–∏—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —É–∫–∞–∑–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –ø—É—Ç–∏ –∫ —Ñ–∞–π–ª—É –∫–ª—é—á–∞ IndexNow (–°—Ç–æ–ª–±–µ—Ü –≤ –ë–î: indexnow_key_path)
# TODO: –î–æ–±–∞–≤–∏—Ç—å —É—Ç–æ—á–Ω–µ–Ω–∏–µ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∫–∞–∫–∏–µ –ø–æ–∏—Å–∫–æ–≤—ã–µ —Å–∏—Å—Ç–µ–º—ã –±—É–¥–µ–º –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –∑–∞–ø—Ä–æ—Å Yandex, Bing –ø–æ –æ—Ç–¥–µ–ª—å–Ω–æ—Å—Ç–∏ –∏–ª–∏ –≤–º–µ—Å—Ç–µ (–°—Ç–æ–ª–±–µ—Ü –≤ –ë–î: indexnow_service)
@dp.callback_query(F.data == "useIndexNow")
async def process_use_indexnow(callback_query: types.CallbackQuery, state: FSMContext):
    logging.info(f"[{callback_query.from_user.id}] –ù–∞ –ø—Ä–æ–µ–∫—Ç–µ –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –ø–µ—Ä–µ–æ–±—Ö–æ–¥ –ø—Ä–∏ –ø–æ–º–æ—â–∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ IndexNow")
    await callback_query.message.edit_reply_markup(reply_markup=None)
    await state.update_data(indexnow = True) # await state.get_data()

    await state.set_state(CreateProject.indexnow_key)
    await bot.answer_callback_query(callback_query.id)
    logging.info(f"[{callback_query.from_user.id}] –û–∂–∏–¥–∞–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è IndexNow –∫–ª—é—á–∞")
    await bot.send_message(callback_query.from_user.id, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ IndexNow –∫–ª—é—á")

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ - IndexNow - –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π indexnow_key
@dp.message(CreateProject.indexnow_key)
async def process_use_indexnow(message: types.Message, state: FSMContext):
    logging.info(f"[{message.from_user.id}] –ö–ª—é—á IndexNow –ø–æ–ª—É—á–µ–Ω - –æ–±—Ä–∞–±–æ—Ç–∫–∞")
    await state.update_data(indexnow_key = message.text) # await state.get_data()

    await state.set_state(CreateProject.indexnow_key_path) # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    builder = InlineKeyboardBuilder()
    # builder.add(types.InlineKeyboardButton(text="–í –∫–æ—Ä–Ω–µ —Å–∞–π—Ç–∞", callback_data="*"))
    builder.add(types.InlineKeyboardButton(text="–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="skipSetIndexNowKeyPatch"))
    await bot.send_message(message.from_user.id, "–ö–ª—é—á IndexNow –ø–æ–ª—É—á–µ–Ω, —É–∫–∞–∂–∏—Ç–µ URL –µ–≥–æ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏—è", reply_markup=builder.as_markup())
    
# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ - IndexNow - –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ù–µ—Ç"
@dp.callback_query(F.data == "notUseIndexNow")
async def process_not_use_indexnow(callback_query: types.CallbackQuery, state: FSMContext):
    try: await callback_query.message.edit_reply_markup(reply_markup=None) # –ü–æ–ø—ã—Ç–∫–∞ —Å–∫—Ä—ã—Ç–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    except: pass

    logging.info(f"[{callback_query.from_user.id}] –û—Ç–∫–∞–∑ –æ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è IndexNow")
    await bot.answer_callback_query(callback_query.id)

    await state.set_state(CreateProject.add_to_db)
    await state.update_data(indexnow = False) # await state.get_data()
    logging.info(f"[{callback_query.from_user.id}] –ü—Ä–æ–µ–∫—Ç —Å–æ–∑–¥–∞–Ω.")
    # await bot.send_message(callback_query.from_user.id, f"–ü—Ä–æ–µ–∫—Ç {url} —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω.\n\n{data}")
    # await asyncio.sleep(2)
    data = await state.get_data()
    await commit_to_db(callback_query.from_user.id, data)
    await state.clear()
    # await bot.edit_message_text(text="–ü—Ä–æ–µ–∫—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω", chat_id=callback_query.message.chat.id, message_id=callback_query.message.message_id)

# –ü—Ä–æ–ø—É—Å–∫ —É–∫–∞–∑–∞–Ω–∏—è –ø—É—Ç–∏ IndexNow key patch
@dp.callback_query(F.data == "skipSetIndexNowKeyPatch")
async def process_not_use_indexnow(callback_query: types.CallbackQuery, state: FSMContext):
    try: await callback_query.message.edit_reply_markup(reply_markup=None) # –ü–æ–ø—ã—Ç–∫–∞ —Å–∫—Ä—ã—Ç–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    except: pass

    logging.info(f"[{callback_query.from_user.id}] –ü—Ä–æ–ø—É—Å–∫ —É–∫–∞–∑–∞–Ω–∏—è –ø—É—Ç–∏ –∫ –∫–ª—é—á—É IndexNow")
    # await state.update_data(indexnow_key_path = message.text) # await state.get_data()
    data = await state.get_data()

    await state.set_state(CreateProject.add_to_db)
    await commit_to_db(callback_query.from_user.id, data)
    await state.clear()

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ - IndexNow - –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π indexnow_key_path
# TODO: –ú–æ–∂–Ω–æ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–≤ —É–∫–∞–∑–∞–≤ —Ç–æ–ª—å–∫–æ –ø—É—Ç—å –¥–æ —Ñ–∞–π–ª–∞ –∏ –∑–∞–ø–æ–ª–Ω—è—Ç—å indexnow_key –ø—Ä–∏ –ø–æ–º–æ—â–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞
@dp.message(CreateProject.indexnow_key_path)
async def set_indexnow_key_patch(message: types.Message, state: FSMContext):
    # try: await callback_query.message.edit_reply_markup(reply_markup=None) # –ü–æ–ø—ã—Ç–∫–∞ —Å–∫—Ä—ã—Ç–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    # except: pass

    logging.info(f"[{message.from_user.id}] –ö–ª—é—á IndexNow –ø–æ–ª—É—á–µ–Ω - –æ–±—Ä–∞–±–æ—Ç–∫–∞")
    await state.update_data(indexnow_key_path = message.text) # await state.get_data()
    data = await state.get_data()

    await state.set_state(CreateProject.add_to_db)
    await commit_to_db(message.from_user.id, data)
    await state.clear()

# –û—Ç–ø—Ä–∞–≤–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –ë–î, —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞
async def commit_to_db(user_id, data):
    # TODO: –î–æ–±–∞–≤–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É –µ—Å–ª–∏ –Ω–∏ –¥–æ–±–∞–≤–ª–µ–Ω –¥–ª—è —Ä–∞–±–æ—Ç—ã –Ω–∏ –æ–¥–∏–Ω –∏–∑ —Å–µ—Ä–≤–∏—Å–æ–≤
    logging.info(f"[{user_id}] –ü–æ–ø—ã—Ç–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –ø—Ä–æ–µ–∫—Ç–∞ –≤ –ë–î.\nData = {data}")

    if data['indexing_api'] or data['webmaster'] or data['indexnow']:
        conn = sqlite3.connect(DB)
        cursor = conn.cursor()
        cursor.execute('INSERT INTO projects (user_id, url, indexing_api, indexing_api_key, webmaster, yandex_user_token, indexnow, indexnow_key) VALUES (?, ?, ?, ?, ?, ?, ?, ?)', (user_id, data['url'], data['indexing_api'], data.get('indexing_api_key', None), data['webmaster'], data.get('yandex_user_token', None), data['indexnow'], data.get('indexnow_key', None)))
        conn.commit()
        logging.info(f"[{user_id}] –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø—Ä–æ–µ–∫—Ç–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã. –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ë–î.")
        conn.close()

        # TODO: –î–æ–±–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞?
        message_text = (
            "–ü—Ä–æ–µ–∫—Ç " + re.sub(r'^(https?://)?(www\.)?', '', str(data['url'])).rstrip('/') + 
            " —Å–æ—Ö—Ä–∞–Ω–µ–Ω\n" +
            ('\nGoogle Indexing API: –í–∫–ª—é—á–µ–Ω' if data['indexing_api'] else '') +
            ('\nYandex.Webmaster: –í–∫–ª—é—á–µ–Ω' if data['webmaster'] else '') +
            ('\nIndexNow: –í–∫–ª—é—á–µ–Ω' if data['indexnow'] else '')
        )
        await bot.send_message(user_id, message_text, disable_web_page_preview=True)

        logging.info(f"[{user_id}] –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞\n\n{data}")
    else:
        await bot.send_message(user_id, "–î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –º–∏–Ω–∏–º—É–º –æ–¥–∏–Ω —Å–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã (Google Indexing API, Yandex.Webmaster, IndexNow)", disable_web_page_preview=True)
        return
    
# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–∞
# TODO: –î–æ—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∞–∫–∫–∞—É–Ω—Ç–∞
# TODO: –ü—Ä–æ—Ä–∞–±–æ—Ç–∞—Ç—å –∏ –¥–æ–±–∞–≤–∏—Ç—å –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å–∫—Ä–∏–ø—Ç–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
@dp.message(Command("settings"))
@dp.callback_query(F.data == "settings")
async def settings(callback_query: types.CallbackQuery, state: FSMContext):
    if callback_query.from_user.username: # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ª–æ–≥–∏–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–î–ª—è –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è)
        username = "@" + callback_query.from_user.username + " (" + str(callback_query.from_user.id) + ")"
    else:
        username = callback_query.from_user.id
    logging.info(f"{username} / –í–≤–µ–¥–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ settings")
    await state.set_state(SettingsForm.main) # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ

    try: await callback_query.message.edit_reply_markup(reply_markup=None) # –ü–æ–ø—ã—Ç–∫–∞ —Å–∫—Ä—ã—Ç–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    except: pass

    logging.info(f"{username} / –ö–æ–º–∞–Ω–¥–∞ settings / –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö") # –ó–∞–ø—Ä–æ—Å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    await callback_query.answer("–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∞–∫–∫–∞—É–Ω—Ç–∞")
    conn = sqlite3.connect(DB)
    cursor = conn.cursor()
    logging.info(f"{username} / –ö–æ–º–∞–Ω–¥–∞ settings / –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
    cursor.execute('SELECT default_yandex_user_token FROM settings WHERE user_id = ?', (callback_query.from_user.id,))
    settings = cursor.fetchall()
    logging.info(f"{username} / –ö–æ–º–∞–Ω–¥–∞ settings / –ó–∞–∫—Ä—ã—Ç–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö")
    conn.close() # –ó–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö

    builder = InlineKeyboardBuilder()
    if settings:
        builder.row(types.InlineKeyboardButton(text=f"–ò–∑–º–µ–Ω–∏—Ç—å Yandex User token", callback_data="set_default_yandex_user_token"))
    else:
        builder.row(types.InlineKeyboardButton(text=f"Yandex User token: –ù–µ –∑–∞–¥–∞–Ω", callback_data="set_default_yandex_user_token"))

    await bot.send_message(callback_query.from_user.id, "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–∞", reply_markup=builder.as_markup())

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ç–æ–∫–µ–Ω–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è —Å–µ—Ä–≤–∏—Å–∞ –Ø–Ω–¥–µ–∫—Å –í–µ–±–º–∞—Å—Ç–µ—Ä 
@dp.callback_query(F.data == "set_default_yandex_user_token")
async def handle_button1(callback_query: types.CallbackQuery, state: FSMContext):
    await state.set_state(SettingsForm.set_default_yandex_user_token) # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await callback_query.message.edit_reply_markup(reply_markup=None) # –°–∫—Ä—ã–≤–∞–µ–º inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    # await callback_query.answer("–í—ã –Ω–∞–∂–∞–ª–∏ –∫–Ω–æ–ø–∫—É 1!")
    # TODO: –î–æ–±–∞–≤–∏—Ç—å –¥–∏–∞–ª–æ–≥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–º–µ–Ω—ã —Ç–æ–∫–µ–Ω–∞
    await callback_query.message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ Yandex User token –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")

@dp.message(SettingsForm.set_default_yandex_user_token)
async def process_use_webmaster(message: Message, state: FSMContext):
    # await callback_query.message.edit_reply_markup(reply_markup=None) # –°–∫—Ä—ã–≤–∞–µ–º inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    if message.text == "default":
        await message.answer("–í–≤–µ–¥–µ–Ω–æ –Ω–µ–≤–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞")
        return
    else:
        await state.update_data(default_yandex_user_token = message.text) # await state.get_data()
        data = await state.get_data()
        logging.info(f"DATA == {data}")

        conn = sqlite3.connect(DB) # –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
        cursor = conn.cursor()
        attempts = 0
        max_attempts = 5
        while attempts < max_attempts:
            try:
                cursor.execute('INSERT INTO settings (user_id, default_yandex_user_token) VALUES (?, ?)', (message.from_user.id, data['default_yandex_user_token']))
                break
            except sqlite3.OperationalError:
                attempts += 1
                logging.warning(f"–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è –Ø–Ω–¥–µ–∫—Å –í–µ–±–º–∞—Å—Ç–µ—Ä / OperationalError: –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—ã—Ç–∫–∞ {attempts} –∏–∑ {max_attempts}")
                if attempts == max_attempts:
                    logging.warning(f"–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è –Ø–Ω–¥–µ–∫—Å –í–µ–±–º–∞—Å—Ç–µ—Ä / –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö. –î–æ—Å—Ç–∏–≥–Ω—É—Ç–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –≤–æ–∑–º–æ–∂–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫")
            except sqlite3.IntegrityError:
                try:
                    cursor.execute('UPDATE settings SET default_yandex_user_token = ? WHERE user_id = ?', (data['default_yandex_user_token'], message.from_user.id))
                    break
                except sqlite3.OperationalError:
                    attempts += 1
                    logging.warning(f"–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è –Ø–Ω–¥–µ–∫—Å –í–µ–±–º–∞—Å—Ç–µ—Ä / IntegrityError: –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—ã—Ç–∫–∞ {attempts} –∏–∑ {max_attempts}")
                    if attempts == max_attempts:
                        logging.warning(f"–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è –Ø–Ω–¥–µ–∫—Å –í–µ–±–º–∞—Å—Ç–µ—Ä / –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö. –î–æ—Å—Ç–∏–≥–Ω—É—Ç–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –≤–æ–∑–º–æ–∂–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫")
        conn.commit()
        conn.close() # –ó–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
        
        await message.answer(f"–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è Yandex User token (–ü–æ —É–º–æ–ª—á–∞–Ω–∏—é) = {data['default_yandex_user_token']}")

'''
# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–∫–∫–∞—É–Ω—Ç–∞ param1
@dp.callback_query(F.data == "param1")
async def process_param1(callback_query: types.CallbackQuery, message: types.Message, state: FSMContext):
    logging.info(f"[{message.from_user.id}] –í–≤–æ–¥ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ settings-param2")
    async with state.proxy() as data:
        data['param1'] = callback_query.data
    await bot.answer_callback_query(callback_query.id)
    await SettingsForm.next()
    await bot.send_message(callback_query.from_user.id, "–í–≤–µ–¥–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ 'settings-param2''")

@dp.callback_query(F.data == "param2")
async def process_param2(message: types.Message, state: FSMContext):
    logging.info(f"[{message.from_user.id}] –ò–∑–º–µ–Ω–µ–Ω—ã –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")
    async with state.proxy() as data:
        data['param2'] = message.text
        logging.info(f"[{message.from_user.id}] –ü–æ–ø—ã—Ç–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Å—Ü–µ–Ω–∞—Ä–∏—è —Ä–∞–±–æ—Ç—ã.")
        conn = sqlite3.connect(DB)
        cursor = conn.cursor()
        cursor.execute('INSERT OR REPLACE INTO settings (user_id, param1, param2) VALUES (?, ?, ?)', (message.from_user.id, data['param1'], data['param2']))
        conn.commit()
        logging.info(f"[{message.from_user.id}] –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å—Ü–µ–Ω–∞—Ä–∏—è —Ä–∞–±–æ—Ç—ã —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã. –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ë–î.")
        conn.close()
        await message.answer("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã.")
    await state.finish()

@dp.message_handler(commands=['mysettings'])
async def mysettings(message: types.Message):
    conn = sqlite3.connect(DB)
    cursor = conn.cursor()
    cursor.execute('SELECT param1, param2 FROM settings WHERE user_id = ?', (message.from_user.id,))
    row = cursor.fetchone()
    if row:
        logging.info(f"[{message.from_user.id}] –ü–æ–∫–∞–∑–∞–Ω—ã –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ä–∞–±–æ—Ç—ã —Å—Ü–µ–Ω–∞—Ä–∏—è.")
        await message.answer(f"param1: {row[0]}\nparam2: {row[1]}")
    else:
        logging.error(f"[{message.from_user.id}] –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.")
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫.")
    conn.close()
'''

# –§—É–Ω–∫—Ü–∏–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏—è
## –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞, –∫–æ–º–∞–Ω–¥–æ–π /stop
@dp.message(StateFilter(None), Command("stop"))
async def broadcast_command(message: types.Message, state: FSMContext):
    if message.from_user.id == admin_id:
        await message.answer(text=f"–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã")
        return

    logging.critical("–ó–∞–ø—É—â–µ–Ω–∞ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º")
    await message.answer(text="ü§ñ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞")
    await bot.delete_webhook(drop_pending_updates=True) # –£–¥–∞–ª—è–µ–º –≤–µ–±—Ö—É–∫ –∏, –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏, –æ—á–∏—â–∞–µ–º –æ–∂–∏–¥–∞—é—â–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    await bot.session.close() # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–µ—Å—Å–∏—é –±–æ—Ç–∞, –æ—Å–≤–æ–±–æ–∂–¥–∞—è —Ä–µ—Å—É—Ä—Å—ã
    os._exit(1)

## –ú–∞—Å—Å–æ–≤–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º 
# TODO: –î–æ—Ä–∞–±–æ—Ç–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é —Ä–∞—Å—Å—ã–ª–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –æ—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º)
@dp.message(StateFilter(None), Command("broadcast"))
async def broadcast_command(message: types.Message, state: FSMContext):
    if message.from_user.id == admin_id:
        await message.answer(text=f"–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã")
        return

    await message.answer(text="–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏")
    await state.set_state(AdminState.broadcast) # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏

### –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏
@router.message(StateFilter("AdminState:broadcast"))
async def handle_broadcast_message(message: types.Message, state: FSMContext):
    text = message.text # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
    try:
        await bot.send_message(admin_id, text)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {admin_id}: {e}")

    await message.answer("–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")
    await state.finish() # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ

# TODO: –û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
# TODO: –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞
# TODO: –î–æ–±–∞–≤–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É —Ñ–∞–π–ª–æ–º TXT, CSV
# TODO: –î–æ–±–∞–≤–∏—Ç—å –≤—ã–≤–æ–¥ –æ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–π –∑–∞–¥–∞—á–µ –≤ –∫–æ–Ω—Ü–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–∏
@dp.message(F.text)
async def get_project_info(message: Message):
    logging.info(f"[{message.from_user.id}] –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞ URL")
    # await hide_markup(message.bot, message.chat.id, message.message_id)

    # –í—ã–ø–æ–ª–Ω—è–µ–º –æ—á–∏—Å—Ç–∫—É –¥—É–±–ª–µ–π —Å—Ç—Ä–æ–∫ –∏ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç—ã–µ
    urls = []
    seen = set()

    for url in message.text.split('\n'):
        if url not in seen:
            if url:
                urls.append(url)
                seen.add(url)

    for line in urls[:]:
        project_url = check_valid_url(message.from_user.id, line, True)
        # TODO: –ï—Å–ª–∏ –ø—Ä–æ–µ–∫—Ç –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –≤—ã–¥–∞–µ–º –æ—à–∏–±–∫—É
        if not project_url:
            logging.error(f"[{message.from_user.id}] –í–≤–µ–¥–µ–Ω–Ω—ã–π –¥–æ–º–µ–Ω {project_url} –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –∏–ª–∏ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –£–¥–∞–ª—è–µ–º —Å—Ç—Ä–æ–∫—É {line} –∏–∑ —Å–ø–∏—Å–∫–∞ URL")
            # await message.reply(f"–í–≤–µ–¥–µ–Ω–Ω—ã–π –¥–æ–º–µ–Ω {project_url} –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –∏–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π URL.")
            try:
                urls.remove(line)
            except ValueError:
                logging.error(f"[{message.from_user.id}] –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å —ç–ª–µ–º–µ–Ω—Ç {line}, —Ç–∞–∫ –∫–∞–∫ –æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–ø–∏—Å–∫–µ")
        else:
            logging.info(f"[{message.from_user.id}] –û–±—Ä–∞–±–æ—Ç–∫–∞ line = {line}")
            conn = sqlite3.connect(DB)
            cursor = conn.cursor()
            cursor.execute('SELECT id, url, indexing_api, indexing_api_key, webmaster, yandex_user_token, indexnow, indexnow_key, indexnow_key_path, indexnow_service FROM projects WHERE user_id = ? AND url = ?', (message.from_user.id, project_url))
            project = cursor.fetchone()
            project_id, project_url, indexing_api, indexing_api_key, webmaster, yandex_user_token, indexnow, indexnow_key, indexnow_key_path, indexnow_service = project

            if project:
                indexing_api_result = None
                webmaster_result = None
                indexnow_result = None

                # –ü–µ—Ä–µ–æ–±—Ö–æ–¥ —Å—Ç—Ä–∞–Ω–∏—Ü —Å–∞–π—Ç–∞ –ø—Ä–∏ –ø–æ–º–æ—â–∏ —Å–µ—Ä–≤–∏—Å–∞ Google Indexing API
                # TODO: –í—ã–≤–µ—Å—Ç–∏ —Ä–∞–±–æ—Ç—É –∫–∞–∂–¥–æ–≥–æ –∏–∑ —Å–µ—Ä–≤–∏—Å–æ–≤ –æ—Ç–¥–µ–ª—å–Ω—ã–º —Ü–∏–∫–ª–æ–º for ???
                if indexing_api:
                    indexing_api_result = google_publish(message.from_user.id, indexing_api_key, line)

                # –ü–µ—Ä–µ–æ–±—Ö–æ–¥ —Å—Ç—Ä–∞–Ω–∏—Ü —Å–∞–π—Ç–∞ –ø—Ä–∏ –ø–æ–º–æ—â–∏ —Å–µ—Ä–≤–∏—Å–∞ –Ø–Ω–¥–µ–∫—Å –í–µ–±–º–∞—Å—Ç–µ—Ä
                if webmaster:
                    if yandex_user_token == "default":
                        cursor.execute('SELECT default_yandex_user_token FROM settings WHERE user_id = ?', (message.from_user.id,))
                        yandex_user_token = cursor.fetchone()
                        yandex_user_token = yandex_user_token[0]

                    webmaster_result = yandex_recrawl(message.from_user.id, yandex_user_token, line)

                    # TODO: –î–æ–¥–µ–ª–∞—Ç—å –¥–∏–ª–æ–≥–æ–≤–æ–µ –æ–∫–Ω–æ –ø—Ä–∏ –≤–æ–∑–Ω–∏–∫–Ω–æ–≤–µ–Ω–∏–∏ –æ—à–∏–±–∫–∏ –ø—Ä–∏ –ø–µ—Ä–µ–æ–±—Ö–æ–¥–µ
                    if "üî¥" in webmaster_result:
                        builder = InlineKeyboardBuilder()
                        builder.row(
                            types.InlineKeyboardButton(text="–î–∞", callback_data="non-action"),
                            types.InlineKeyboardButton(text="–ù–µ—Ç", callback_data="non-action")
                        )

                        await bot.send_message(message.from_user.id, text=f"{line}\n\n{webmaster_result}\n\n–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É –Ω–∞ –ø–µ—Ä–µ–æ–±—Ö–æ–¥?", disable_web_page_preview=True, disable_notification=True, reply_markup=builder.as_markup())
                        break

                # –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞ –ø–µ—Ä–µ–æ–±—Ö–æ–¥ –ø—Ä–∏ –ø–æ–º–æ—â–∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ IndexNow
                if indexnow:
                    indexnow_service = ["yandex"] # TODO: –£–±—Ä–∞—Ç—å –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π
                    # indexnow_service = ["yandex", "bing"] # TODO: –£–±—Ä–∞—Ç—å –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π
                    indexnow_result = indexnow_publish(message.from_user.id, project_url, indexnow_key, indexnow_key_path, indexnow_service, line)
                
                await bot.send_message(message.from_user.id, text=f"{line}\n{indexing_api_result if indexing_api_result else ''}{webmaster_result if webmaster_result else ''}{indexnow_result if indexnow_result else ''}", disable_web_page_preview=True, disable_notification=True)
                # await message.answer(f"ID: {project[0]}\nURL: {project[1]}\nIndexing API: {project[2]}\nIndexing API JSON: {project[3]}\nYandex Webmaster: {project[4]}\nYandex user token: {project[5]}")
            else:
                # TODO: –ï—Å–ª–∏ –ø—Ä–µ–æ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω - –≤—ã–≤–æ–¥–∏–º inline –∫–Ω–æ–ø–∫–∏ –≥–¥–µ —Å–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–∏ —Ü–∏–∫–ª–∞, –≤—ã—Ö–æ–¥–µ –∏–ª–∏ –≤—ã—Ö–æ–¥–µ –∏–∑ –Ω–µ–≥–æ (hard-mode: –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–µ–∫—Ç)
                logging.error(f"[{message.from_user.id}] –ü—Ä–æ–µ–∫—Ç {project_url} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ë–î. –£–¥–∞–ª—è–µ–º —Å—Ç—Ä–æ–∫—É {line} –∏–∑ —Å–ø–∏—Å–∫–∞ URL")
                try:
                    urls.remove(line)
                except ValueError:
                    logging.error(f"[{message.from_user.id}] –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å —ç–ª–µ–º–µ–Ω—Ç {line}, —Ç–∞–∫ –∫–∞–∫ –æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–ø–∏—Å–∫–µ")
                # logging.error(f"[{message.from_user.id}] –ü—Ä–æ–µ–∫—Ç {project_url} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ë–î")
                # markup = types.InlineKeyboardMarkup()
                # markup.add(types.InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–µ–∫—Ç", callback_data="create-project"))
                # await message.answer(f"–ü—Ä–æ–µ–∫—Ç {project_url} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö", reply_markup=markup)
            conn.close()
    await bot.send_message(message.from_user.id, text="–ó–∞–¥–∞—á–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞", disable_web_page_preview=True, disable_notification=True)
    # –ú–æ–∂–Ω–æ —Ç–∞–∫–∂–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤—Å–µ—Ö —Å—Ç—Ä–æ–∫

# TODO: –°—Ç—Ä–∞–Ω–Ω–æ –æ—Ç—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç, –≤–æ–∑–º–æ–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å
# –°–ø–∏—Å–æ–∫ –±—ã—Å—Ç—Ä—ã—Ö –∫–æ–º–∞–Ω–¥
async def set_commands():
    ## –ö–æ–º–∞–Ω–¥—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    user_commands = [
        BotCommand(command='start', description='–°—Ç–∞—Ä—Ç'),
        BotCommand(command='projects', description='–°–ø–∏—Å–æ–∫ –ø—Ä–æ–µ–∫—Ç–æ–≤'),
        BotCommand(command='settings', description='–ù–∞—Å—Ç—Ä–æ–π–∫–∏')
    ]

    await bot.set_my_commands(user_commands, BotCommandScopeDefault()) # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π

# –§—É–Ω–∫—Ü–∏—è –≤—ã–ø–æ–ª–Ω—è–µ–º–∞—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞
async def on_startup():
    await set_commands() # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–º–∞–Ω–¥–Ω–æ–≥–æ –º–µ–Ω—é
    await bot.delete_webhook(drop_pending_updates=True)
    await bot.send_message(admin_id, f"ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω ‚Äì {__version__}", disable_notification=True)

async def on_shutdown():
    await bot.send_message(admin_id, "ü§ñ –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    await bot.delete_webhook(drop_pending_updates=True) # –£–¥–∞–ª—è–µ–º –≤–µ–±—Ö—É–∫ –∏, –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏, –æ—á–∏—â–∞–µ–º –æ–∂–∏–¥–∞—é—â–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    await bot.session.close() # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–µ—Å—Å–∏—é –±–æ—Ç–∞, –æ—Å–≤–æ–±–æ–∂–¥–∞—è —Ä–µ—Å—É—Ä—Å—ã
    os._exit(1)

# –ó–∞–ø—É—Å–∫ –ø—Ä–æ—Ü–µ—Å—Å–∞ –ø–æ–ª–ª–∏–Ω–≥–∞ –Ω–æ–≤—ã—Ö –∞–ø–¥–µ–π—Ç–æ–≤
async def main():
    dp.startup.register(on_startup) # –í—ã–ø–æ–ª–Ω—è–µ–º–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞
    dp.shutdown.register(on_shutdown) # –í—ã–ø–æ–ª–Ω—è–µ–º–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –±–æ—Ç–∞
    await bot.delete_webhook()
    await dp.start_polling(bot)

if __name__ == "__main__":
    i = 0
    loop = asyncio.get_event_loop() # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π event loop
    
    while True:
        try:
            if os.getenv("API_TOKEN") is None:
                logging.critical("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é API_TOKEN –¥–ª—è aiogram. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –æ–Ω –µ—Å—Ç—å –≤ —Ñ–∞–π–ª–µ .env")
            else:
                init_db()
                loop.run_until_complete(main())  # –ó–∞–ø—É—Å–∫–∞–µ–º main() –≤ —Ç–µ–∫—É—â–µ–º event loop
        except Exception as e:
            i += 1
            logging.critical(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}. –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞. –ü–æ–ø—ã—Ç–∫–∞ {i}")
            if i >= 5:
                logging.critical(f"–î–æ—Å—Ç–∏–≥–Ω—É—Ç–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—à–∏–±–æ–∫ - {i}. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã")
                os._exit(0)
            time.sleep(5)  # –ó–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–æ–º