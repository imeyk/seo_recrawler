import logging
import os
import requests
from pprint import pprint
import socket
from urllib.parse import urlparse, urlunparse

# TODO: –î–æ–±–∞–≤–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É —Å–æ–±—ã—Ç–∏—è, –≤ —Å–ª—É—á–∞–µ –Ω–µ–≤–µ—Ä–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω–∞ –∏–ª–∏ –æ–∫–æ–Ω—á–∞–Ω–∏—è –µ–≥–æ —Å—Ä–æ–∫–∞ —Ä–∞–±–æ—Ç—ã
def get_yandex_user_id(user_id, yandex_user_token):
    # https://yandex.ru/dev/webmaster/doc/dg/reference/user.html
    response = requests.get("https://api.webmaster.yandex.net/v4/user", headers = {"Authorization": f'OAuth {yandex_user_token}'})
    responseJSON = response.json()
    logging.info(f"responseJSON = {responseJSON}")
    if "error_code" in responseJSON:
        logging.error("–û—à–∏–±–∫–∞!")
        return False
    elif "user_id" in responseJSON:
        logging.info(f"[{user_id}] –ü–æ–ª—É—á–µ–Ω —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ø–Ω–¥–µ–∫—Å (yandexUserID = {str(responseJSON['user_id'])})")
        return str(responseJSON['user_id'])
    else:
        logging.critical("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞!")
        return False

def get_webmaster_site_list(user_id, yandex_user_token, yandex_user_id):
    # https://yandex.ru/dev/webmaster/doc/dg/reference/hosts.html
    response = requests.get("https://api.webmaster.yandex.net/v4/user/" + yandex_user_id + "/hosts", headers = {"Authorization": f'OAuth {yandex_user_token}'})
    # logging.info(f"[{user_id}] –ü–æ–ª—É—á–µ–Ω —Å–ø–∏—Å–æ–∫ —Å–∞–π—Ç–æ–≤ –¥–ª—è {yandex_user_id}: {response.json()}")
    logging.info(f"[{user_id}] –ü–æ–ª—É—á–µ–Ω —Å–ø–∏—Å–æ–∫ —Å–∞–π—Ç–æ–≤ –¥–ª—è {yandex_user_id}")
    return response.json()

def get_webmaster_host_id(user_id, domain, webmaster_site_list):
    # TODO: –ù—É–∂–Ω–∞ –ª–∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ URL?
    for hostURL in webmaster_site_list['hosts']:
        if hostURL['ascii_host_url'] == domain:
            if hostURL['verified'] == True:
                logging.info(f"[{user_id}] –°–∞–π—Ç {hostURL['ascii_host_url']} –æ–±–Ω–∞—Ä—É–∂–µ–Ω –∏ –∏–º–µ–µ—Ç –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é –≤ —Å–µ—Ä–≤–∏—Å–µ –Ø–Ω–¥–µ–∫—Å.–í–µ–±–º–∞—Å—Ç–µ—Ä")
                return hostURL['host_id']
                break
            else:
                logging.error(f"[{user_id}] –°–∞–π—Ç –æ–±–Ω–∞—Ä—É–∂–µ–Ω, –Ω–æ –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω –≤ —Å–µ—Ä–≤–∏—Å–µ –Ø–Ω–¥–µ–∫—Å.–í–µ–±–º–∞—Å—Ç–µ—Ä.")
                return("\nüî¥ –Ø–Ω–¥–µ–∫—Å.–í–µ–±–º–∞—Å—Ç–µ—Ä: –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏. –ù–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω—ã –ø—Ä–∞–≤–∞ –Ω–∞ —Å–∞–π—Ç")
                # TODO: –î–æ–±–∞–≤–∏—Ç—å –¥–∏–∞–ª–æ–≥–æ–≤–æ–µ –æ–∫–Ω–æ –æ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–∏ –∏–ª–∏ –ø—Ä–µ–∫—Ä–∞—â–µ–Ω–∏–∏ —Ä–∞–±–æ—Ç—ã
    else:
        logging.error(f"[{user_id}] –ù–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω—ã –ø—Ä–∞–≤–∞ –Ω–∞ —Å–∞–π—Ç –≤ –Ø–Ω–¥–µ–∫—Å.–í–µ–±–º–∞—Å—Ç–µ—Ä –∏–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∞ –≤–Ω—É—Ç—Ä–µ–Ω—è—è –æ—à–∏–±–∫–∞")
        return("\nüî¥ –Ø–Ω–¥–µ–∫—Å.–í–µ–±–º–∞—Å—Ç–µ—Ä: –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏. –ù–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω—ã –ø—Ä–∞–≤–∞ –Ω–∞ —Å–∞–π—Ç, –∏–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∞ –≤–Ω—É—Ç—Ä–µ–Ω—è—è –æ—à–∏–±–∫–∞")
        # TODO: –î–æ–±–∞–≤–∏—Ç—å –¥–∏–∞–ª–æ–≥–æ–≤–æ–µ –æ–∫–Ω–æ –æ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–∏ –∏–ª–∏ –ø—Ä–µ–∫—Ä–∞—â–µ–Ω–∏–∏ —Ä–∞–±–æ—Ç—ã

# TODO: –ù—É–∂–Ω–∞ –ª–∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—Ä–∞–≤–æ–ø–∏—Å–∞–Ω–∏—è –¥–æ–º–µ–Ω–∞ —Å WWWW –∏–ª–∏ –±–µ–∑
def check_valid_url(user_id, url, check_domain=False):
    logging.info(f"[{user_id}] –ù–∞—á–∞—Ç –ø—Ä–æ—Ü–µ—Å—Å –ø—Ä–æ–≤–µ—Ä–∫–∏ URL {url} –Ω–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å")
    if not url.startswith(('http://', 'https://')):
        url = 'http://' + url

    parsed_url = urlparse(url)
    hostname = parsed_url.netloc or parsed_url.path

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Ä–µ—Å—É—Ä—Å–∞ –ø–æ HTTP
    try:
        with socket.create_connection((hostname, 80), timeout=5):
            # logging.info("–û–ø—Ä–µ–¥–µ–ª–µ–Ω–æ –Ω–∞–ª–∏—á–∏–µ http:// –ø—Ä–æ—Ç–æ–∫–æ–ª–∞")
            scheme = 'http'
    except Exception:
        scheme = None

    # –ï—Å–ª–∏ —Ä–µ—Å—É—Ä—Å –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ HTTP, –ø—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –ø–æ HTTPS
    if scheme:
        try:
            with socket.create_connection((hostname, 443), timeout=5):
                # logging.info("–û–ø—Ä–µ–¥–µ–ª–µ–Ω–æ –Ω–∞–ª–∏—á–∏–µ https:// –ø—Ä–æ—Ç–æ–∫–æ–ª–∞")
                scheme = 'https'
        except Exception:
            pass

    # –ï—Å–ª–∏ —Ä–µ—Å—É—Ä—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –∏ –ø–æ HTTP, –∏ –ø–æ HTTPS, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—à–∏–±–∫—É
    if not scheme:
        logging.error(f"[{user_id}] –†–µ—Å—É—Ä—Å {scheme}://{hostname} –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
        return(f"\nüî¥ –Ø–Ω–¥–µ–∫—Å.–í–µ–±–º–∞—Å—Ç–µ—Ä: –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏. –†–µ—Å—É—Ä—Å {scheme}://{hostname} –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
        
    logging.info(f"[{user_id}] –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Ç–æ–∫–æ–ª {scheme} –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞")

    if check_domain == True:
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–ª—å–∫–æ –¥–æ–º–µ–Ω —Å–∞–π—Ç–∞
        url = f"{scheme}://{hostname}/"
        logging.info(f"[{user_id}] –§–æ—Ä–º–∏—Ä—É–µ–º –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º URL –¥–æ–º–µ–Ω–∞: {url}")
        if not parsed_url.path or parsed_url.path == hostname:
            path = '/'
        else:
            path = parsed_url.path
        return url
    else:
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≤–≤–µ–¥–µ–Ω–Ω—ã–π url
        url = urlunparse((scheme, hostname, parsed_url.path, '', '', ''))
        logging.info(f"[{user_id}] –§–æ—Ä–º–∏—Ä—É–µ–º –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–ª–Ω—ã–π URL: {url}")
        return url

def yandex_recrawl(user_id, yandex_user_token='', line=''):
    yandex_user_id = get_yandex_user_id(user_id, yandex_user_token)
    if yandex_user_id != False:
        webmaster_site_list = get_webmaster_site_list(user_id, yandex_user_token, yandex_user_id)
        domain = check_valid_url(user_id, line, check_domain=True)
        webmaster_host_id = get_webmaster_host_id(user_id, domain, webmaster_site_list)
    else:
        return(f"\nüî¥ –Ø–Ω–¥–µ–∫—Å.–í–µ–±–º–∞—Å—Ç–µ—Ä: –ù–µ–≤–∞–ª–∏–¥–Ω—ã–π —Ç–æ–∫–µ–Ω")
    
    # https://yandex.ru/dev/webmaster/doc/dg/reference/host-recrawl-post.html
    data = {"url": f"{line}"}
    response = requests.post("https://api.webmaster.yandex.net/v4/user/" + yandex_user_id + "/hosts/" + webmaster_host_id + "/recrawl/queue", json = data, headers = {"Authorization": f'OAuth {yandex_user_token}'})
    pprint(response.json())
    # TODO: –î–æ–±–∞–≤–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π
    return("\nüü¢ –Ø–Ω–¥–µ–∫—Å.–í–µ–±–º–∞—Å—Ç–µ—Ä: –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ –ø–µ—Ä–µ–æ–±—Ö–æ–¥") # response.json()
    
if __name__ == '__main__':
    logging.basicConfig(level=logging.INFO, format='%(asctime)s / %(levelname)s / %(message)s', datefmt='%d.%m.%y %H:%M:%S')
    yandex_recrawl("Test", os.getenv("test_webmaster_user_token"), os.getenv("test_webmaster_url"))